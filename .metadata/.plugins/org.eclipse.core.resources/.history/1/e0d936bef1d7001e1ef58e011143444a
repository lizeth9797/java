package org.generation;
import org.generation.classes.Employee;
import org.generation.classes.Person;
import org.generation.ex.exceptions.EmailFormatException;

public class Main {
	public static void main(String[] args) {
		//Person chayo= new Person(); //constructor que inicializa el objeto person. Nota: ya no podemos usar el constructor vacio (por default) porque agregamos el constructor en la clase Person, por lo tanto esta linea ya no aplica.
		/* ya no se define así, esto solo aplica cuando el constructor es vacio (por default)
		chayo.name="Chayo Orozco";
		chayo.age=21;
		chayo.email="chayo@gmail.com"; 
		*/
		
		Employee chayo=new Employee("Chayo",21,"chayo@gmail.com","XAXX000000","Casa","QA",850);//al ya no ser un constructor por default/vacío, le debemos proporcionar el valor de sus propiedades aqui
		//Cuando agregamos "abstract" en person ya no podemos crear objetos tipo Person, sólo employee:
		//Person monse=new Person("Monse Cervantes",20,"monse@gmail.com"); //pondrá RFC y dirección por default, la que definimos en el 2do constructor en Person
		
		//Le dejamos person xxx new Employee porque los employees al final son personas
		Person monse=new Employee("Monse Cervantes",20,"monse@gmail.com"); //pondrá RFC y dirección por default, la que definimos en el 2do constructor en Person
		Person jetsa=new Employee("Jetsa Villegas");
				
		System.out.println(jetsa.getAge());
		jetsa.setAge(17);
		System.out.println(jetsa.getAge());
		System.out.println(jetsa.getEmail());
		//jetsa.setEmail("jetsa@yahoo.c");
		try {
			jetsa.setEmail("jetsa@yahoo.c");
		}catch(EmailFormatException e) {
			System.out.println(e.getMessage());
		}//catch
		System.out.println(jetsa.getEmail());

		System.out.println(chayo);
		System.out.println(monse);
		System.out.println(jetsa);

		chayo.setName("Chayo Orozco");
		System.out.println(monse.getName());
		System.out.println(chayo);

	}//main
}//class main
